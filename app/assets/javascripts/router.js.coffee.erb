@BonnieRouter = class BonnieRouter extends Backbone.Router

  initialize: ->
    @maxErrorCount = 3
    @maxMsgCount = 3
    @mainView = new Thorax.LayoutView(el: '#bonnie')
    # This measure collection gets populated as measures are loaded via their individual JS
    # files (see app/views/measures/show.js.erb)
    @measures = new Thorax.Collections.Measures()

    @calculator_selector = new CalculatorSelector()
    @cqm_calculator = new CQMCalculator()

    # FIXME deprecated, use measure.get('patients') to get patients for individual measure
    @patients = new Thorax.Collections.Patients()

    @breadcrumb = new Thorax.Views.Breadcrumb()

    @on 'route', -> window.scrollTo(0, 0)

    @applicationVersion = '<%=Bonnie::Version.current%>';
    @support_fhir_version = '<%=Bonnie::Version.fhir_ver%>';

    $('a.switch-group-link').on 'click ', _.bind(@onSwitchRole, this)

    if !window.disableSessionManagement
      showWarningInactiveMs = parseInt('<%= APP_CONFIG['show_warning_inactive_ms'] %>', 10)
      logoutInactiveMs = parseInt('<%= APP_CONFIG['logout_inactive_ms'] %>', 10)
      @registerUserSessionAutoLogout(showWarningInactiveMs, logoutInactiveMs)

#   User inactivity auto-logout
  registerUserSessionAutoLogout: (showWarningInactiveMs, logoutInactiveMs) ->
    logoutInactiveAfterWarningMs = logoutInactiveMs - showWarningInactiveMs
    # List of events should be consistend with the events used in the warning dialog
    userEvents = rxjs.merge(
        # Add an initial (stub) event, it's needed to trigger a timeout in case of no user interactions since the app is loaded.
        # EMPTY doesn't trigger an event, only a completion.
        rxjs.of({type: 'initial'}),
        rxjs.fromEvent(document, 'click'),
#        rxjs.fromEvent(document, 'mousemove'),
        rxjs.fromEvent(document, 'keydown')
    )
    userEvents.pipe(rxjs.operators.debounceTime(showWarningInactiveMs)).subscribe((x) =>
      if !window.disableSessionManagement
        @showInactiveWarning(logoutInactiveAfterWarningMs)
    )
    userEvents.pipe(rxjs.operators.debounceTime(logoutInactiveMs)).subscribe((x) =>
      if !window.disableSessionManagement
        @logout()
    )

  logout: ->
    # Ajax DELETE doesn't work as expected. It terminates bonnie's session, but not the SAML one.
    logoutLink = document.createElement('a')
    logoutLink.id = 'autoLogoutLink'
    logoutLink.href = '/users/sign_out'
    logoutLink.setAttribute('data-method', 'delete')
    document.body.appendChild(logoutLink)
    logoutLink.click()

  routes:
    '':                                                'renderMeasures'
    'measures':                                        'renderMeasures'
    'measures/:set_id':                           'renderMeasure'
    'measures/:set_id/patients/:id/edit': 'renderPatientBuilder'
    'measures/:set_id/patients/new':      'renderPatientBuilder'
    'admin/users':                                     'renderUsers'
    'admin/groups':                                     'renderGroups'
    # This will catch any unmatched hashes and route them to showPageNotFound
    '*path':                                            'showPageNotFound'

  renderMeasures: ->
    @measures.each (measure) -> measure.set('displayedPopulation', measure.get('populations').first())
    @navigationSetup "Dashboard", "dashboard"
    dashboardView = new Thorax.Views.Measures(collection: @measures.sort(), patients: @patients)
    @mainView.setView(dashboardView)

  renderMeasure: (setId) ->
    measure = _.find(@measures.models, (measure) -> measure.get('cqmMeasure').set_id is setId) if setId

    if measure?
      @navigationSetup "Measure View", "dashboard"
      document.title += " - #{measure.get('cqmMeasure').cms_id}" if measure?
      measureLayoutView = new Thorax.Views.MeasureLayout(measure: measure, patients: @patients)
      @mainView.setView(measureLayoutView)
      measureLayoutView.showMeasure()
      @breadcrumb.addMeasure(measure)
    else
      @showPageNotFound()

  renderUsers: ->
    @navigationSetup "Admin", "admin"
    @users = new Thorax.Collections.Users()
    usersView = new Thorax.Views.Users(collection: @users)
    @mainView.setView(usersView)

  renderGroups: ->
    @navigationSetup "Admin", "admin"
    groups = new Thorax.Collections.Groups()
    groupsView = new Thorax.Views.GroupsView(collection: groups)
    @mainView.setView(groupsView)

  renderPatientBuilder: (measuresetId, patientId) ->
    measure = _.find(@measures.models, (measure) -> measure.get('cqmMeasure').set_id is measuresetId) if measuresetId
    patient = if patientId? then @patients.get(patientId) else new Thorax.Models.Patient {measure_ids: [measure?.get('cqmMeasure').set_id]}, parse: true
    if measure? and patient?
      @navigationSetup "Patient Builder", "patient-builder"
      document.title += " - #{measure.get('cqmMeasure').cms_id}" if measure?
      patientBuilderView = new Thorax.Views.PatientBuilder(model: patient, measure: measure, patients: @patients, measures: @measures, inPatientDashboard: false)
      @mainView.setView patientBuilderView
      @breadcrumb.addPatient(measure, patient)
    else
      @showPageNotFound()

  # Common setup method used by all routes
  navigationSetup: (title, selectedNav) ->
    @calculator_selector.cancelCalculations()
    @breadcrumb.clear()
    document.title = "Bonnie v#{bonnie.applicationVersion}: #{title}"
    if selectedNav?
      $('ul.nav > li').removeClass('active').filter(".nav-#{selectedNav}").addClass('active')

  # This method is to be called directly, and not triggered via a
  # route; it allows the patient builder to be used in new patient
  # mode populated with data from an existing patient, ie a clone
  navigateToPatientBuilder: (patient, measure) ->
    # FIXME: Remove this when the Patients View is removed; select the first measure if a measure isn't passed in
    measure ?= _.find(@measures.models, (measure) -> measure.get('cqmMeasure').set_id is patient.get('measure_ids')[0])
    @mainView.setView new Thorax.Views.PatientBuilder(model: patient, measure: measure, patients: @patients, measures: @measures, inPatientDashboard: false)
    @breadcrumb.addPatient(measure, patient)
    @navigate "measures/#{measure.get('cqmMeasure').set_id}/patients/new"

  showError: (error) ->
    return if $('.errorDialog').length > @maxErrorCount
    if $('.errorDialog').length == @maxErrorCount
      error.title = "Multiple Errors: #{error.title}"
      error.summary = "This page has generated multiple errors... additional errors will be suppressed. #{error.summary}"
    errorDialogView = new Thorax.Views.ErrorDialog error: error
    errorDialogView.appendTo('#bonnie')
    errorDialogView.display()

  showMsg: (msg) ->
    return if $('.msgDialog').length > @maxErrorCount
    if $('.msgDialog').length == @maxMsgCount
      msg.title = "Multiple Messages: #{msg.title}"
      msg.summary = "This page has generated multiple messages... additional messages will be suppressed. #{msg.summary}"
    msgDialogView = new Thorax.Views.MsgDialog msg: msg
    msgDialogView.appendTo('#bonnie')
    msgDialogView.display()

  showInactiveWarning: (countdownMs) ->
    # Make sure only one inactive session warning is show
    return if $('#inactiveWarningDialog').length > 0
    wrn = new Thorax.Views.InactiveWarningDialog(countdownMs: countdownMs)
    wrn.appendTo(document.body)
    wrn.display()

  showPageNotFound: ->
    @mainView.setView new Thorax.Views.ErrorView
    @breadcrumb.clear()

  onSwitchRole: (e) ->
    target = $(e.target).closest('a')
    if /^measures.+patients.+/.test(Backbone.history.fragment)
      e.preventDefault()
      href = target.attr('href')
      switchRoleConfirmDialog = new Thorax.Views.SwitchRoleConfirmationDialog( href: href )
      switchRoleConfirmDialog.appendTo('#bonnie')
      switchRoleConfirmDialog.display()
