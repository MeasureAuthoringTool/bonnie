<script type="text/javascript">  
  function prettyDate(UnixDate) {
    d = new Date(UnixDate)
    return d.getMonth() + 1 + "/" + d.getDate() + "/" + d.getFullYear();
  };
  
  function patientHistory (patientData,measureData) {
  // Get all the unique patient and measure dates to use for the ordinal xScale
    patientDates = [];
    $.each(patientData, function (index,value){
      $.each(value.times, function (index, value) {
        patientDates.push(value.updateTime)
      })
    });
    measureDates = []
    $.each(measureData, function (index,value){
        measureDates.push(value.updateTime)
    });
    var uniqueDates = jQuery.unique( patientDates.concat(measureDates) ).sort();
    
    // Set up the height, width, margins, and ordinal x axis scale
    var bubbleRadius = 12
    var bubbleMargin = 15
    var gutter = 40 // For the measure update label at the bottom of the timeline
    var width = uniqueDates.length * 50 // 50px per event
    var height = patientData.length * (bubbleRadius + bubbleMargin)*2
    var margin = {top: 10, right: 30, bottom: 10, left: 30}
        
    var x = d3.scale.ordinal()
              .domain(uniqueDates)
              .rangePoints([0, width]);
              
    // Set up the Tooltip for each bubble
    var tip = d3.tip()
                .attr('class', 'd3-tip')
                .offset([-10, 0])
                .html(function(d) {
                    if (d.changed) {
                      return "<span>" + d.changed + "</span>";
                    }
                    else {return "Patient Created"}
                })
    
    // Draw the chart
    var chart = d3.select("#patientHistory")
                  .append("svg")
                  .attr("width", width + margin.left + margin.right)
                  .attr("height", height + gutter);
                  
    // Call the tooltip library
    chart.call(tip);
                  
    // Draw the measure update lines
    chart.selectAll("line")
        .data(measureData)
      .enter().append("line")
        .attr("x1", function(d) {return x(d.updateTime) + margin.left;} )
        .attr("y1", 0)
        .attr("x2", function(d) {return x(d.updateTime) + margin.left;} )
        .attr("y2", height)
        .attr("stroke-width", 6)
        .attr("stroke", "gray")
        .attr("stroke-dasharray", "2,1");
                                  
    // Draw the measure update labels
    chart.selectAll("text")
        .data(measureData)
      .enter().append("text")
        .attr("x", function(d) {return x(d.updateTime) + margin.left;} )
        .attr("y", height + 11 )
        .attr("text-anchor", "middle")
        .attr("fill", "blue")
        .text("MEASURE")
        .attr("class","measureUpdateLabel")
        // TODO: redo this click event to actually do a diff
        .on("click", function(d) {alert("Set up diff between " + d.oldVersion + " and " + d.newVersion)})
        .append('svg:tspan')
          .attr("x", function(d) {return x(d.updateTime) + margin.left;} )
          .attr('dy', 13)
          .text("UPDATED")
          .append('svg:tspan')
            .attr("x", function(d) {return x(d.updateTime) + margin.left;} )
            .attr('dy', 13)
            .text(function(d) {return prettyDate(d.updateTime);});
                    
    // Draw the patient update bubbles
    patientData.forEach( function(datum, index){
      var data = datum.times;
      var minTime = 999999999999999,
          maxTime = 0;
      $.each(data, function (index,value){
          if (value.updateTime < minTime) {minTime = value.updateTime};
          if (value.updateTime > maxTime) {maxTime = value.updateTime};
      });
      
      // Background for each patient
      chart.append("line")
        .attr("x1", x(minTime) + margin.left )
        .attr("y1", (index + 1) * (bubbleRadius + bubbleMargin)*2 - (bubbleRadius*2 + bubbleMargin) + bubbleRadius)
        .attr("x2", x(maxTime) + margin.left )
        .attr("y2", (index + 1) * (bubbleRadius + bubbleMargin)*2 - (bubbleRadius*2 + bubbleMargin) + bubbleRadius)
        .attr("stroke-width", 2)
        .attr("stroke", "gray");
          
      // Patient labels              
      chart.append("text")
        .attr("x", x(minTime) )
        .attr("y", (index + 1) * (bubbleRadius + bubbleMargin)*2 - (bubbleRadius*2 + bubbleMargin) - bubbleMargin/4 )
        .text(datum.label)
        .attr("class","timeline-label");
                        
      // Create a group for the bubble and icon
      var bubbles = chart.append("g").selectAll("circle")
                        .data(data)
                      .enter().append("g");
                      
      // Add all the relevant actions to the group
      bubbles.attr("class", "patientUpdateIndicator")
            .on('mouseover', tip.show)
            .on('mouseout', tip.hide)
            // TODO: redo this click event to actually show the patient
            .on("click", function (d, i) {
              alert("Redirect to the version of " + datum.label + " updated on " + new Date(d.updateTime))
            })
            .attr("id", function(d, i) {
              return d.id ? d.id : "timelineItem_"+index+"_"+i;
            });
      
      // Add a backing to the bubbles so none of the background shows through   
      bubbles.append("circle")
            .attr("cx", function(d) {return x(d.updateTime) + margin.left;} )
            .attr("cy", (index + 1) * (bubbleRadius + bubbleMargin)*2 - (bubbleRadius + bubbleMargin))
            .attr("r", bubbleRadius)
            .style("fill", "white")
            .style("stroke", "white")
            .style("stroke-width",2);
            
      // Add icons to the bubbles
      bubbles.append("text")
            .attr("x", function(d) {return x(d.updateTime) + margin.left;} )
            .attr("y", (index + 1) * (bubbleRadius + bubbleMargin)*2 - (bubbleRadius + bubbleMargin))
            .text(function(d) { if (d.result == "pass") {return "\uf00c"}
                                  else { return "\uf00d" }
                              })
            .style("fill", function(d) { if (d.result == "pass") {return "#004119"}
                                          else { return "#730800" }
                                      })
            .style('font-family','FontAwesome')
            .attr('text-anchor', 'middle')
            .attr('dominant-baseline', 'central')
            .attr('font-size', bubbleRadius * 1.5 + 'px');
      
      // Add the bubbles in the correct place with fill and stroke    
      bubbles.append("circle")
            .attr("cx", function(d) {return x(d.updateTime) + margin.left;} )
            .attr("cy", (index + 1) * (bubbleRadius + bubbleMargin)*2 - (bubbleRadius + bubbleMargin))
            .attr("r", bubbleRadius)
            .style("fill", function(d) { if (d.result == "pass") {return "#20744c"}
                                          else { return "#a63b12" }
                                      })
            .style("fill-opacity",0.5)
            .style("stroke", function(d) { if (d.result == "pass") {return "#004119"}
                                          else { return "#730800" }
                                      })
            .style("stroke-width",2);
      
    });
  } // patientHistory
    
</script>
<link rel="stylesheet" href="assets/test_case_history.css" />
<div class="row">
  <div class="main">
    <div class="measure-title">
      <h1 class="short-title"><i class="fa fa-fw fa-history" aria-hidden="true"></i> Test Case History - {{cms_id}}</h1>
    </div>
    <div class="measure-dsp">
      <h2 class="full-title">{{title}}</h2>
      <p>{{description}}</p>
    </div>
    <!-- TODO: Ensure that the stratification tabs toggle a render for the data -->
    {{#ifCond populations.length ">" 1}}
      {{#collection populations tag='ul' class='nav nav-tabs'}}
        <li{{#ifCond sub_id "==" 'a'}} class="active"{{/ifCond}}>
          <a href data-toggle="tab">{{#if title}}{{title}}{{else}}{{sub_id}}{{/if}}</a>
        </li>
      {{/collection}}
    {{/ifCond}}
    <div id="patientHistory"></div>
    <div id="measureDiff"></div>
  </div>
  <script>
    console.log("GENERATE NEW MEASURE DATA - START");
  
    var patientData;
    var measureData;

    $.when(
      // Get the measure data
      $.get("/measures/history?id={{hqmf_set_id}}", function(data) {
        measureData = data;
        console.log("RETRIEVED MEASURE DATA - " + JSON.stringify(measureData));    
      }),
      // Get the patient data
      $.get("/patients/history?id={{hqmf_set_id}}", function(data) {
        patientData = data;
        console.log("RETRIEVED TEMP DATA - " + JSON.stringify(patientData));    
      })
    ).then(function() {
      patientHistory(patientData,measureData);
    });

    console.log("GENERATE NEW MEASURE DATA - STOP");
    console.log("LOG MESSAGE: {{cms_id}}");
  </script>
</div>
