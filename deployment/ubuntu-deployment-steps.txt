On Ubuntu 12.04 system:
-----------------------

Update packages:

  sudo apt-get -y update

Install apache:

  sudo apt-get install -y apache2

Install some other dependencies:

  sudo apt-get install -y libcurl4-openssl-dev apache2-threaded-dev libapr1-dev libaprutil1-dev libgmp3-dev

Install mongodb:

  sudo sh -c "echo 'deb http://downloads-distro.mongodb.org/repo/ubuntu-upstart dist 10gen' >> /etc/apt/sources.list"
  sudo apt-key adv --keyserver keyserver.ubuntu.com --recv 7F0CEB10
  sudo apt-get update
  sudo apt-get install mongodb-10gen

Install RVM:

  curl -L https://get.rvm.io | sudo -i bash -s stable

Log out and back in, then install ruby using rvm and some related components

  sudo -i
  rvm autolibs enable
  rvm install 2.2.3
  rvm --default 2.2.3
  gem install bundler
  gem install passenger
  gem install capistrano -v 3.2.1
  gem install capistrano-bundler -v 1.1.2
  gem install capistrano-rails -v 1.1.1
  gem install rvm1-capistrano3 -v 1.2.2
  exit

Install passenger apache 2 module (select ruby only)

  sudo -i
  passenger-install-apache2-module
  exit

Add some needed apache modules

  sudo a2enmod headers
  sudo a2enmod expires

============= FOR APACHE 2.2 =============

Add a file (as root, using sudo -i):

  /etc/apache2/conf.d/mod_passenger.conf

With the following content (use output from passenger-install-apache2-module):

  LoadModule passenger_module /usr/local/rvm/gems/ruby-2.0.0-p451/gems/passenger-4.0.37/buildout/apache2/mod_passenger.so
  <IfModule mod_passenger.c>
    PassengerRoot /usr/local/rvm/gems/ruby-2.0.0-p451/gems/passenger-4.0.37
    PassengerDefaultRuby /usr/local/rvm/gems/ruby-2.0.0-p451/wrappers/ruby
    PassengerMinInstances 4
    PassengerMaxPoolSize 4
    PassengerMaxRequests 1000
    PassengerPreStart http://localhost/
  </IfModule>

Add a file (as root, using sudo -i):

  /etc/apache2/sites-available/bonnie

With the following content (changing the path appropriately):

  <VirtualHost *:80>
    DocumentRoot <path>/bonnie/current/public
    RewriteEngine On
    ErrorDocument 503 /system/maintenance.html
    RewriteCond %{DOCUMENT_ROOT}/system/maintenance.html -f
    RewriteCond %{SCRIPT_FILENAME} !maintenance.html
    RewriteRule ^.*$ - [L,R=503]
    <Location /assets/>
      # Use of ETag is discouraged when Last-Modified is present
      Header unset ETag
      FileETag None
      # RFC says only cache for 1 year
      ExpiresActive On
      ExpiresDefault "access plus 1 year"
    </Location>
    <Directory <path>/bonnie/current/public>
      AllowOverride all
      Options -MultiViews
      # Compress css and js
      AddOutputFilterByType DEFLATE text/css application/x-javascript application/javascript text/javascript
    </Directory>
  </VirtualHost>

============= FOR APACHE 2.4 =============

Add a file (as root, using sudo -i):

  /etc/apache2/conf-available/mod_passenger.conf

With the following content (use output from passenger-install-apache2-module):

  LoadModule passenger_module /usr/local/rvm/gems/ruby-2.0.0-p451/gems/passenger-4.0.37/buildout/apache2/mod_passenger.so
  <IfModule mod_passenger.c>
    PassengerRoot /usr/local/rvm/gems/ruby-2.0.0-p451/gems/passenger-4.0.37
    PassengerDefaultRuby /usr/local/rvm/gems/ruby-2.0.0-p451/wrappers/ruby
    PassengerMinInstances 4
    PassengerMaxPoolSize 4
    PassengerMaxRequests 1000
    PassengerPreStart http://localhost/
  </IfModule>

Then run

  sudo a2enconf mod_passenger

Add a file (as root, using sudo -i):

  /etc/apache2/sites-available/bonnie

With the following content (changing the path appropriately):

  <VirtualHost *:80>
    DocumentRoot <path>/bonnie/current/public
    RewriteEngine On
    ErrorDocument 503 /system/maintenance.html
    RewriteCond %{DOCUMENT_ROOT}/system/maintenance.html -f
    RewriteCond %{SCRIPT_FILENAME} !maintenance.html
    RewriteRule ^.*$ - [L,R=503]
    <Location /assets/>
      # Use of ETag is discouraged when Last-Modified is present
      Header unset ETag
      FileETag None
      # RFC says only cache for 1 year
      ExpiresActive On
      ExpiresDefault "access plus 1 year"
    </Location>
    <Directory <path>/bonnie/current/public>
      AllowOverride all
      Options -MultiViews
      Require all granted
      # Compress css and js
      AddOutputFilterByType DEFLATE text/css application/x-javascript application/javascript text/javascript
    </Directory>
  </VirtualHost>

============= END APACHE 2.4 =============

Configure sites:

  sudo a2dissite default
  sudo a2ensite bonnie

If necessary, create a deploy user account (if one already exists skip this step)

  sudo adduser <deployuser>

If Capistrano will be run from the deploy system (kicked off externally by a
deployment hook), create an ssh key for the deployment account and allow the
account to ssh to itself using that key

  sudo -u <deployuser> -i
  ssh-keygen -f ~/.ssh/id_rsa -N ''
  cat ~/.ssh/id_rsa.pub >> ~/.ssh/authorized_keys
  chmod 600 ~/.ssh/authorized_keys
  ssh -oStrictHostKeyChecking=no localhost exit
  exit

Create some shared resources local to the deployment system

  shared/config/initializers/secret_token.rb (with unique local key created with 'rake secret')
  shared/config/hostname (if host doesn't know it's own public name)

Restart apache

  sudo service apache2 reload

If desired, configure monit to monitor services

  sudo apt-get install monit

  edit /etc/monit/monitrc for 1 minute monitoring interval

    set daemon 60            # check services at 1-minute intervals

  add a file: /etc/monit/conf.d/mongod

    check process mongodb with pidfile /var/lib/mongodb/mongod.lock
      start program = "/usr/sbin/service mongodb start"
      stop program = "/usr/sbin/service mongodb stop"
      if failed host 127.0.0.1 port 28017 protocol http
        and request "/" with timeout 10 seconds then restart
      if memory usage > 70% for 5 cycles then restart
      if 5 restarts within 5 cycles then timeout

  restart monit to include changes

    sudo service monit restart

If desired, configure logrotate to rotate log files

  Create a file called /etc/logrotate.d/bonnie containing

    <path>/bonnie/current/log/production.log {
        monthly
        missingok
        notifempty
        rotate 36
        compress
        delaycompress
        copytruncate
        su <user> <group>
    }

============= FOR ENABLING CQL->ELM TRANSLATION SERVER =============

Install JRE (used for CQL service)
  sudo apt-add-repository ppa:webupd8team/java
  sudo apt-get update
  sudo apt-get install oracle-java8-installer

If necessary, set the system Java to a previously installed version
  sudo apt-get install icedtea-7-plugin
  sudo update-java-alternatives -s java-1.7.0-openjdk-amd64

Set up the CQL service to run via upstart
  copy the CQL service JAR file into /usr/local/bin/
  change ownership of CQL service JAR to <deploy user>
    chown <deploy user>:<deploy user> <CQL service JAR>

  add a file: /etc/init/cqlTranslationServer.conf with the content:

    description "Starts the CQL Translation Server jar"
    author "MITRE Bonnie team"

    start on runlevel [2345]
    stop on runlevel [!2345]

    script
            sudo -u <deploy user> screen -Sdm cqlTranslationServer /usr/lib/jvm/java-8-oracle/jre/bin/java -jar /usr/local/bin/cqlTranslationServer-1.0-SNAPSHOT-jar-with-dependencies.jar
    end script

check the syntax of the file
  init-checkconf /etc/init/cqlTranslationServer.conf

reload upstart configurations
  sudo initctl reload-configuration

start and check the status of the cql start service
  sudo service cqlTranslationServer start
  sudo service cqlTranslationServer status

check that the service is actually running
  ps aux | grep java


OBSOLETE: If simply interested in starting the CQL service manually, it can be run using:

  screen -dmS cqlTranslationServer /usr/lib/jvm/java-8-oracle/jre/bin/java -jar cqlTranslationServer-1.0-SNAPSHOT-jar-with-dependencies.jar
  screen -list
  screen -r <pid>.cqlTranslationServer


============= END FOR ENABLING CQL->ELM TRANSLATION SERVER =============
